generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(uuid())
  imageUrl    String
  userName    String
  displayName String
  email       String   @unique
  phoneNumber String
  age         Int
  password    String
  reviewCount Int      @default(0)
  isActive    Boolean  @default(true)
  address     Json
  orders      Order[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  reviews     Review[] @relation("user")
}

model Review {
  id        Int      @id @default(autoincrement())
  text      String
  userId    String
  imageUrl  String
  createdAt DateTime @default(now())
  productId String?
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id           String      @id @default(uuid())
  imageUrl     String
  productName  String
  price        Int?
  desc         String
  categories   Category[]  @relation("CategoryToProduct")
  stock        Int?
  soldOut      Int
  reviews      Review[]
  reviewCount  Int         @default(0)
  variantCount Int         @default(0)
  isActive     Boolean     @default(true)
  market       Market      @relation(fields: [marketId], references: [id])
  marketId     String
  createAt     DateTime    @default(now())
  updateAt     DateTime    @updatedAt
  variant      Variant[]
  orders       OrderItem[]
}

model Market {
  id           String    @id @default(uuid())
  imageUrl     String
  displayName  String
  bio          String
  email        String    @unique
  phoneNumber  String
  password     String
  isActive     Boolean   @default(true)
  productCount Int       @default(0)
  address      Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  status     String      @default("PENDING")
  totalPrice Decimal     @default(0)
  createdAt  DateTime    @default(now())
  items      OrderItem[]
  user       User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  variantId String
  quantity  Int
  subTotal  Decimal
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant   Product @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model Category {
  id       Int       @id @default(autoincrement())
  label    String
  desc     String
  products Product[] @relation("CategoryToProduct")
}

model Variant {
  id        Int      @id @default(autoincrement())
  label     String
  stock     Int      @default(0)
  price     Int      @default(0)
  productId String
  type      String
  Products  Product? @relation(fields: [productId], references: [id])
}
